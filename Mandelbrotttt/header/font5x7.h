#ifndef FONT5X7_H
#define FONT5X7_H

#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

/*
This is for benchmarking text rendering.
*/

struct Glyph5x7 {
    uint8_t rows[7];
};

inline const std::unordered_map<char, Glyph5x7>& font5x7() {
    static const std::unordered_map<char, Glyph5x7> F = {
        {' ', {{0,0,0,0,0,0,0}}},
        {'0', {{0x1E,0x11,0x13,0x15,0x19,0x11,0x1E}}},
        {'1', {{0x04,0x0C,0x04,0x04,0x04,0x04,0x1F}}},
        {'2', {{0x1E,0x11,0x01,0x06,0x08,0x10,0x1F}}},
        {'3', {{0x1E,0x11,0x01,0x0E,0x01,0x11,0x1E}}},
        {'4', {{0x02,0x06,0x0A,0x12,0x1F,0x02,0x02}}},
        {'5', {{0x1F,0x10,0x1E,0x01,0x01,0x11,0x1E}}},
        {'6', {{0x0E,0x10,0x1E,0x11,0x11,0x11,0x0E}}},
        {'7', {{0x1F,0x01,0x02,0x04,0x08,0x08,0x08}}},
        {'8', {{0x0E,0x11,0x11,0x0E,0x11,0x11,0x0E}}},
        {'9', {{0x0E,0x11,0x11,0x0F,0x01,0x01,0x0E}}},
        {':', {{0x00,0x04,0x00,0x00,0x00,0x04,0x00}}},
        {'.', {{0x00,0x00,0x00,0x00,0x00,0x06,0x06}}},
        {'-', {{0x00,0x00,0x00,0x1F,0x00,0x00,0x00}}},
        {'(', {{0x02,0x04,0x08,0x08,0x08,0x04,0x02}}},
        {')', {{0x08,0x04,0x02,0x02,0x02,0x04,0x08}}},
        {'A', {{0x0E,0x11,0x11,0x1F,0x11,0x11,0x11}}},
        {'B', {{0x1E,0x11,0x11,0x1E,0x11,0x11,0x1E}}},
        {'C', {{0x0E,0x11,0x10,0x10,0x10,0x11,0x0E}}},
        {'D', {{0x1E,0x11,0x11,0x11,0x11,0x11,0x1E}}},
        {'E', {{0x1F,0x10,0x10,0x1E,0x10,0x10,0x1F}}},
        {'F', {{0x1F,0x10,0x10,0x1E,0x10,0x10,0x10}}},
        {'H', {{0x11,0x11,0x11,0x1F,0x11,0x11,0x11}}},
        {'I', {{0x1F,0x04,0x04,0x04,0x04,0x04,0x1F}}},
        {'K', {{0x11,0x12,0x14,0x18,0x14,0x12,0x11}}},
        {'L', {{0x10,0x10,0x10,0x10,0x10,0x10,0x1F}}},
        {'M', {{0x11,0x1B,0x15,0x11,0x11,0x11,0x11}}},
        {'N', {{0x11,0x19,0x15,0x13,0x11,0x11,0x11}}},
        {'O', {{0x0E,0x11,0x11,0x11,0x11,0x11,0x0E}}},
        {'P', {{0x1E,0x11,0x11,0x1E,0x10,0x10,0x10}}},
        {'R', {{0x1E,0x11,0x11,0x1E,0x14,0x12,0x11}}},
        {'S', {{0x0F,0x10,0x10,0x0E,0x01,0x01,0x1E}}},
        {'T', {{0x1F,0x04,0x04,0x04,0x04,0x04,0x04}}},
        {'U', {{0x11,0x11,0x11,0x11,0x11,0x11,0x0E}}},
        {'V', {{0x11,0x11,0x11,0x11,0x11,0x0A,0x04}}},
        {'W', {{0x11,0x11,0x11,0x11,0x15,0x1B,0x11}}},
        {'X', {{0x11,0x11,0x0A,0x04,0x0A,0x11,0x11}}},
        {'Y', {{0x11,0x11,0x0A,0x04,0x04,0x04,0x04}}},
        {'G', {{0x0E,0x11,0x10,0x10,0x10,0x11,0x0E}}},
    };
    return F;
}

inline void draw_text_rgba(uint32_t* pix, int W, int H, int x, int y,
                           const std::string& txt, uint32_t color = 0xFFFFFFFFu, int scale = 2)
{
    const auto& F = font5x7();
    int cx = x, cy = y;
    for (char ch : txt) {
        if (ch == '\n') {
            cy += 8 * scale; cx = x; continue;
        }
        auto it = F.find(ch);
        const Glyph5x7* g = nullptr;
        if (it != F.end()) g = &it->second;
        else {
            auto it2 = F.find(' ');
            if (it2 != F.end()) g = &it2->second;
        }
        if (g) {
            for (int row = 0; row < 7; ++row) {
                uint8_t bits = g->rows[row];
                for (int col = 0; col < 5; ++col) {
                    if (bits & (1 << (4 - col))) {
                        for (int yy = 0; yy < scale; ++yy) {
                            int py = cy + row*scale + yy;
                            if (py < 0 || py >= H) continue;
                            for (int xx = 0; xx < scale; ++xx) {
                                int px = cx + col*scale + xx;
                                if (px < 0 || px >= W) continue;
                                pix[py * W + px] = color;
                            }
                        }
                    }
                }
            }
        }
        cx += (6 * scale);
    }
}

#endif
